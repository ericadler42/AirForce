# List of remote hostnames or IP addresses
$remoteHosts = @("Host1", "Host2", "Host3")

# Initialize an empty array to store computer information for online hosts
$onlineComputerInfoArray = @()

# Initialize an empty array to store offline or error hosts
$offlineOrErrorHosts = @()

# Loop through each remote host
foreach ($hostname in $remoteHosts) {
    try {
        $result = Invoke-Command -ComputerName $hostname -ScriptBlock {
            $ipAddress = (Test-Connection -ComputerName $env:COMPUTERNAME -Count 1).IPV4Address.IPAddressToString

            # Get the network adapter name corresponding to the IP address
            $networkAdapterName = (Get-NetAdapter | Where-Object { $_.Status -eq 'Up' }).Name

            # Initialize MAC address variable
            $macAddress = $null

            # Loop through each IP address to find the corresponding MAC address
            foreach ($ip in $ipAddress) {
                $interfaceIndex = (Get-NetIPAddress -IPAddress $ip).InterfaceIndex
                $mac = (Get-NetAdapter -InterfaceIndex $interfaceIndex).MacAddress
                if ($null -ne $mac) {
                    $macAddress = $mac
                    break
                }
            }

            $serialNumber = (Get-CimInstance -ClassName Win32_Bios).SerialNumber
            $osVersion = (Get-CimInstance -ClassName Win32_OperatingSystem).Version

            # Get the device type using WMI
            $deviceType = (Get-WmiObject -Class Win32_ComputerSystem).Model

            return [PSCustomObject]@{
                "Hostname"     = $env:COMPUTERNAME
                "IP Address"   = $ipAddress
                "MAC Address"  = $macAddress
                "Serial Number"= $serialNumber
                "OS Version"   = $osVersion
                "Device Type"  = $deviceType
            }
        }

        # Add the result to the appropriate array
        $onlineComputerInfoArray += $result
    } catch {
        Write-Host "Failed to gather information for host $hostname: $_"
        # Add the hostname to the list of offline or error hosts
        $offlineOrErrorHosts += $hostname
    }
}

# Specify the CSV file paths
$onlineCsvFilePath = "C:\temp\online_computers.csv"
$offlineCsvFilePath = "C:\temp\offline_or_error_hosts.csv"

# Export online computer information to the online CSV
if ($onlineComputerInfoArray.Count -gt 0) {
    $onlineComputerInfoArray | Export-Csv -Path $onlineCsvFilePath -NoTypeInformation -Force
    Write-Host "Online computer information has been saved to $onlineCsvFilePath"
}

# Export offline or error host list to the offline CSV
if ($offlineOrErrorHosts.Count -gt 0) {
    $offlineOrErrorHosts | Export-Csv -Path $offlineCsvFilePath -NoTypeInformation -Force
    Write-Host "Offline or error hosts have been saved to $offlineCsvFilePath"
}

----------------------------------------

# List of remote hostnames or IP addresses
$remoteHosts = @("Host1", "Host2", "Host3")

# Initialize a dictionary to store computer information for online hosts
$onlineComputerInfoDictionary = @{}

# Initialize an empty array to store offline or error hosts
$offlineOrErrorHosts = @()

# Specify the CSV file paths for online and offline hosts
$onlineCsvFilePath = "C:\temp\online_computers.csv"
$offlineCsvFilePath = "C:\temp\offline_or_error_hosts.csv"

# Loop through each remote host
foreach ($hostname in $remoteHosts) {
    try {
        $result = Invoke-Command -ComputerName $hostname -ScriptBlock {
            $ipAddress = (Test-Connection -ComputerName $env:COMPUTERNAME -Count 1).IPV4Address.IPAddressToString

            # Get the network adapter name corresponding to the IP address
            $networkAdapterName = (Get-NetAdapter | Where-Object { $_.Status -eq 'Up' }).Name

            # Initialize MAC address variable
            $macAddress = $null

            # Loop through each IP address to find the corresponding MAC address
            foreach ($ip in $ipAddress) {
                $interfaceIndex = (Get-NetIPAddress -IPAddress $ip).InterfaceIndex
                $mac = (Get-NetAdapter -InterfaceIndex $interfaceIndex).MacAddress
                if ($null -ne $mac) {
                    $macAddress = $mac
                    break
                }
            }

            $serialNumber = (Get-CimInstance -ClassName Win32_Bios).SerialNumber
            $osVersion = (Get-CimInstance -ClassName Win32_OperatingSystem).Version

            # Get the device type using WMI
            $deviceType = (Get-WmiObject -Class Win32_ComputerSystem).Model

            $computerInfo = [PSCustomObject]@{
                "Hostname"     = $env:COMPUTERNAME
                "IP Address"   = $ipAddress
                "MAC Address"  = $macAddress
                "Serial Number"= $serialNumber
                "OS Version"   = $osVersion
                "Device Type"  = $deviceType
            }

            $computerInfo  # Return the information
        }

        # Store the result in the dictionary with the hostname as the key
        $onlineComputerInfoDictionary[$hostname] = $result
    } catch {
        Write-Host "Failed to gather information for host $hostname: $_"
        # Add the hostname to the list of offline or error hosts
        $offlineOrErrorHosts += $hostname
    }
}

# Export online computer information to the online CSV
if ($onlineComputerInfoDictionary.Count -gt 0) {
    $onlineComputerInfoDictionary.Values | Export-Csv -Path $onlineCsvFilePath -NoTypeInformation -Force -Append
    Write-Host "Online computer information has been appended to $onlineCsvFilePath"
}

# Export offline or error host list to the offline CSV
if ($offlineOrErrorHosts.Count -gt 0) {
    $offlineOrErrorHosts | Export-Csv -Path $offlineCsvFilePath -NoTypeInformation -Force
    Write-Host "Offline or error hosts have been saved to $offlineCsvFilePath"
}


